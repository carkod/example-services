name: Postgres Service Example

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

jobs:
  container-job:
    runs-on: ubuntu-latest

    # runs all of the steps inside the specified container rather than on the VM host.
    # Because of this the network configuration changes from host based network to a container network.
    container:
      image: ubuntu:lts
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
        - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v4
    - name: Build Dockerfile
      run: docker build --tag example_services .
      working-directory: ./postgres-fastapi

    - name: Run Dockerfile
      run: docker run --name app example_services
      working-directory: ./postgres-fastapi
      env:
        # use postgres for the host here because we have specified a container for the job.
        # If we were running the job on the VM this would be localhost
        POSTGRES_HOST: postgres
        POSTGRES_PORT: ${{ job.services.postgres.ports[5432] }}

  fastapi-vm-job:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432/tcp
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v4
    - name: Build Dockerfile
      run: docker build --tag example_services .
      working-directory: ./postgres-fastapi
    - name: Run Dockerfile
      run: docker run --network host -e POSTGRES_PORT=${{ job.services.postgres.ports[5432] }} --name app -d example_services

    - name: Check back-end
      run: curl --fail --retry-delay 5 --retry 3 --retry-connrefused localhost:8000

  node-js-vm-job:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          # will assign a random free host port
          - 5432/tcp
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v4
    - name: Build Dockerfile
      run: docker build --tag example_services .
      working-directory: ./postgres

    - name: Run Dockerfile
      run: docker run --network host --name app example_services
      working-directory: ./postgres
      env:
        # use localhost for the host here because we are running the job on the VM.
        # If we were running the job on in a container this would be postgres
        POSTGRES_HOST: localhost
        POSTGRES_PORT: ${{ job.services.postgres.ports[5432] }}
